#!/usr/bin/env python
"""Move DOF.

Usage:
  moveDof list (<address> | --input-file=<if> | -i <if>)
  moveDof backup <address> [--output-file=<of> | -o <of>]
  moveDof restore <address> (--input-file=<if> | -i <if>)
  moveDof move <from-address> <to-address> [--output-file=<of> | -o <of>]
  moveDof swap <a-address> <b-address>
  moveDof (-h | --help)

Options:
  -h --help                   Show this screen.
  -o <of> --output-file=<of>  Store the parameters in a file, default is stdout.
  -i <if> --input-file=<if>   Load the parameters from a file into a DOF.
"""
import pickle
import re

from docopt import docopt
from subprocess import check_output as run
                  #       Name     Cmd  Requires-Configuration-Mode-Unlock
critical_parameters = [ ("P Gain", "P", True)
                      , ("I Gain", "I", True)
                      , ("D Gain", "D", True)
                      , ("Dead Zone", "Z", False)
                      , ("Lower Limit", "L", False)
                      , ("Upper Limit", "U", False)
                      , ("Limit Flags", "K", False)
                      , ("Accumulator Limit", "A", False)
                      , ("Encoder Frequency", "F", False)
                      , ("Max PWM DC", "W", False)
                      , ("Mode", "M", True)
                      # , ("QEI Config", "E")
                      ]


def doList(addr, filename):
  values = {}
  if filename:
    with open(filename) as f:
      values = pickle.load(f)
  else:
    values = queryEverything(addr)
  for k, v in values.iteritems():
    print "{0}: {1}".format(k, v)


def doBackup(addr, filename):
  values = queryEverything(addr)
  if filename:
    with open(filename, "w") as f:
      pickle.dump(values, f)
      for k, v in values.iteritems():
        print "{0}: {1}".format(k, v)
  else:
    print pickle.dumps(values)
  return values


def stripTabs(str):
  return str.replace("\t", "")


def queryEverything(addr):
  results = {}
  for name, cmd, _ in critical_parameters:
    raw_output = run(["XiControl", "-n", addr, "-c", '? {0}'.format(cmd)])
    result = re.search("^\*[^:]+:\s*(.+\S)\s*$",  raw_output, flags=re.MULTILINE)
    if result:
      results[name] = stripTabs(result.group(1))
  return results


def doRestore(addr, filename):
  with open(filename) as f:
    values = pickle.load(f)
    setEverything(addr, values)


def setEverything(addr, values):
  for name, cmd, needsUnlock in critical_parameters:
    if name in values:
      if needsUnlock:
        run(["XiControl", "-n", addr, "-c", "U"])
        run(["XiControl", "-n", addr, "-c", "o {0} {1}".format(cmd, values[name])])
        run(["XiControl", "-n", addr, "-c", "L"])
      else:
        run(["XiControl", "-n", addr, "-c", "o {0} {1}".format(cmd, values[name])])


def doMove(src, dest, filename):
  doBackup(dest, filename)
  setEverything(dest, queryEverything(src))


def doSwap(a, b):
  aVal = queryEverything(a)
  bVal = queryEverything(b)
  setEverything(a, bVal)
  setEverything(b, aVal)


if __name__ == '__main__':
  arguments = docopt(__doc__, version='Move DOF 0.1')
  if arguments["list"]:
    doList(arguments["<address>"], arguments["--input-file"])
  elif arguments["backup"]:
    doBackup(arguments["<address>"], arguments["--output-file"])
  elif arguments["restore"]:
    doRestore(arguments["<address>"], arguments["--input-file"])
  elif arguments["move"]:
    doMove(arguments["<from-address>"], arguments["<to-address>"], arguments["--output-file"])
  elif arguments["swap"]:
    doSwap(arguments["<a-address>"], arguments["<b-address>"])
