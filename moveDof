#!/usr/bin/env python
"""Move DOF.

Usage:
  moveDof list <address>
  moveDof backup <address> [--output-file=<of> | -o <of>]
  moveDof restore <address> (--input-file=<if> | -i <if>)
  moveDof move <from-address> <to-address> [--output-file=<of> | -o <of>]
  moveDof swap <a-address> <b-address>
  moveDof (-h | --help)

Options:
  -h --help                   Show this screen.
  -o <of> --output-file=<of>  Store the parameters in a file, default is stdout.
  -i <if> --input-file=<if>   Load the parameters from a file into a DOF.
"""
import pickle
import re

from docopt import docopt
from subprocess import check_output as run

critical_parameters = [ ("P Gain", "P")
                      , ("I Gain", "I")
                      , ("D Gain", "D")
                      , ("Dead Zone", "Z")
                      , ("Lower Limit", "L")
                      , ("Upper Limit", "U")
                      , ("Limit Flags", "K")
                      , ("Accumulator Limit", "A")
                      , ("Encoder Frequency", "F")
                      , ("Max PWM DC", "W")
                      , ("Mode", "M")
                      , ("QEI Config", "E")
                      ]


def doList(addr):
  values = queryEverything(addr)
  print values
  # for key, value in values:
  #   print "{0}: {1}".format(key, value)


def doBackup(addr, filename):
  values = queryEverything(addr)
  if filename:
    with open(filename, "w") as f:
      pickle.dump(values, f)
      for key, value in values:
        print "{0}: {1}".format(key, value)
  else:
    print pickle.dumps(values)
  return values


def queryEverything(addr):
  results = {}
  for name, cmd in critical_parameters:
    raw_output = run(["XiControl", "-n", addr, "-c", '? {0}'.format(cmd)])
    result = re.search("^\*[^:]+:\s*(.+\S)\s*$",  raw_output, flags=re.MULTILINE)
    if result:
      results[name] = result.group(1)
  return results


def doRestore(addr, filename):
  with open(filename) as f:
    values = pickle.load(f)
    setEverything(addr, values)


def setEverything(addr, values):
  for name, cmd in critical_parameters:
    if name in values:
      run(["XiControl", "-n", addr, "-c", "o {0} {1}".format(cmd, values[name])])


def doMove(src, dest, filename):
  setEverything(dest, doBackup(src, filename))


def doSwap(a, b):
  aVal = queryEverything(a)
  bVal = queryEverything(b)
  setEverything(a, bVal)
  setEverything(b, aVal)


if __name__ == '__main__':
    arguments = docopt(__doc__, version='Move DOF 0.1')
    if arguments["list"]:
      doList(arguments["<address>"])
    elif arguments["backup"]:
      doBackup(arguments["<address>"], arguments["--output-file"])
    elif arguments["restore"]:
      doRestore(arguments["<address>"], arguments["--input-file"])
    elif arguments["move"]:
      doMove(arguments["<from-address>"], arguments["<to-address>"], arguments["--output-file"])
    elif arguments["swap"]:
      doSwap(arguments["<a-address>"], arguments["<b-address>"])
